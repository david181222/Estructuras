/*
 * This source file was generated by the Gradle 'init' task
 */
package dragonball;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;

import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.bag.HashBag;

import dragonball.model.Character;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class App {

    //Vamos a parametrizar el main para poder crear una bolsa parametrizada con genericos. Sin embargo, no es necesario como tal.
    public static <T> void main(String[] args) throws Exception {

        String apiUrl = "https://dragonball-api.com/api/characters";

        try {
            // Crear cliente HTTP
            HttpClient client = HttpClient.newHttpClient();

            // Crear solicitud HTTP
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(apiUrl))
                    .GET()
                    .header("Accept", "application/json")
                    .build();

            // Enviar solicitud y obtener respuesta
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            // Analizar la respuesta JSON
            Gson gson = new Gson();
            JsonObject jsonResponse = gson.fromJson(response.body(), JsonObject.class);

            // Extraer la lista de criptomonedas
            Character[] characterasArray = gson.fromJson(
                    jsonResponse.getAsJsonArray("items"), Character[].class);

            // Convertir el array a una lista
            List<Character> characters = Arrays.asList(characterasArray);

            Queue<Character> charactersQueue = new LinkedList<>();
            for (Character c : characters) {
                charactersQueue.add(c);
            }

            /* Imprimir Characters
          
            Character auxiliar;
            boolean condition = true;
            while (condition) {
                if (charactersQueue.isEmpty()) {
                    condition = false;
                } else {
                    auxiliar = charactersQueue.poll();
                    System.out.println(auxiliar.getName());
                }

            } */

            //A
            int mitad = charactersQueue.size() / 2;
            Character[] CharactersCabezaEnfrentar = new Character[mitad];
            Character character;
            for (int i = 0; i < mitad; i++) {
                character = charactersQueue.poll();
                if (character != null) {
                    CharactersCabezaEnfrentar[i] = character;
                }
            }

            System.out.println("Characters a enfrentar: ");

            Character character2;
            for (int i = 0; i < CharactersCabezaEnfrentar.length; i++) {
                character2 = charactersQueue.poll();
                System.out.println(CharactersCabezaEnfrentar[i].getName() + " - " + character2.getName());
            }

            //B
            Stack<Character> rastreador_poder = new Stack<>();
            int ki;
            for (Character c : characters) {
                ki = Integer.parseInt(c.getKi().replace(".", ""));
                if(ki > 1000000){
                    rastreador_poder.push(c);
                }
            }
            
            Character personaje;
             for (int i = 0; i < rastreador_poder.size(); i++) {
              personaje = rastreador_poder.pop();
                System.out.println("Personaje poderoso: " + personaje.getName() + " - Ki: " + personaje.getKi());
            }

            //C
            Bag<T> bag = new HashBag<>();

            for (Character c : characters) {
                bag.add((T) c.getRace());
            }

            System.out.println("Conteo de razas de los personajes:" +  bag);
           

        } catch (Exception e) {
            System.err.println("Error al consumir la API: " + e.getMessage());
        }
    }

}
